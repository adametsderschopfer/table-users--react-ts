{"version":3,"sources":["State/ducks/app.ts","State/ducks/table.ts","helpers/index.ts","State/reducers.ts","State/index.tsx","hooks/useGetUsers.ts","constants.ts","components/ErrorBlank/ErrorBlank.tsx","components/SearchBar/SearchBar.tsx","components/Loader/Loader.tsx","components/TableList/TableList.tsx","components/CurrentUser/CurrentUser.tsx","components/Paginations/Paginations.tsx","components/TableList/TableHeader/TableHeader.tsx","hooks/useFilter.ts","modules/Table/Table.tsx","hooks/useCurrentUser.ts","hooks/useSearch.ts","hooks/usePagination.ts","modules/App/App.tsx","reportWebVitals.ts","index.tsx"],"names":["ActionTypes","init","isLoading","isError","errorMsg","chunkedArray","array","size","chunks","i","length","push","slice","countPagination","count","Array","from","keys","list","currentPaginationPage","initialList","paginations","combineReducers","table","state","action","type","setData","updateList","setPaginations","setCurrentPaginationPage","setCurrentUser","currentUser","app","loading_on","loading_off","enhancers","composeWithDevTools","applyMiddleware","thunk","store","createStore","reducers","State","children","useGetUsers","useSelector","data","dispatch","useDispatch","useEffect","a","app_ac","axios","get","console","error","ErrorBlank","msg","className","SearchBar","locked","setSearchLine","isErrorSearch","setIsErrorSearch","useState","searchBar","setSearchBar","onChange","e","target","value","onInput","placeholder","disabled","onClick","Loader","style","margin","shapeRendering","width","height","viewBox","preserveAspectRatio","fill","stroke","strokeWidth","strokeDasharray","d","strokeLinecap","transform","transformOrigin","attributeName","repeatCount","dur","keyTimes","values","TableList","map","idx","id","firstName","lastName","email","phone","adress","streetAddress","city","zip","CurrentUser","user","Object","description","Paginations","setPagination","els","name","parent","TableHeader","setEls","setFilter","element","filterMath","elementA","elementB","sort","b","toString","useFilter","elemsOfFilter","Table","cu","find","useCurrentUser","pattern","val","RegExp","replace","upd","match","dispatcherList","arr","trim","useSearch","usePagination","undefined","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2fe3359e.chunk.js","sourcesContent":["/* ts */\r\n\r\nexport interface IAppState {\r\n  isLoading: boolean;\r\n  isError: boolean;\r\n  errorMsg: string | null;\r\n}\r\n\r\n/* \r\n  ACTION TYPES \r\n*/\r\n\r\nexport enum ActionTypes {\r\n  isError = \"APP/IS_ERROR\",\r\n\r\n  /* LOADING */\r\n  loading_on = \"APP/LOADING - ON\",\r\n  loading_off = \"APP/LOADING - OFF\",\r\n}\r\n\r\n/* \r\n  REDUCER\r\n*/\r\n\r\nconst init: IAppState /* Initial state */ = {\r\n  isLoading: true,\r\n  isError: false,\r\n  errorMsg: null,\r\n};\r\n\r\nexport function AppReducer(state: IAppState = init, action: any): IAppState {\r\n  switch (action.type) {\r\n    /* \r\n      Можно было бы пребегнуть к написанию\r\n      одного типа и обращяться к нему с прокидыванием\r\n      bool значения, но так получилось как бы явно\r\n      показать и задокументировать код \r\n    */\r\n\r\n    case ActionTypes.loading_on:\r\n      return { ...state, isLoading: true };\r\n\r\n    case ActionTypes.loading_off:\r\n      return { ...state, isLoading: false };\r\n\r\n    case ActionTypes.isError:\r\n      return { ...state, isError: !state.isError, errorMsg: action.errorMsg };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { ActionTypes as app_ac } from \"./app\";\r\nimport axios from \"axios\";\r\nimport { API } from \"./../../constants\";\r\nimport { Dispatch } from \"redux\";\r\nimport { chunkedArray, countPagination } from \"./../../helpers/index\";\r\n\r\n/* ts */\r\n\r\nexport type User = {\r\n  id: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  email: string;\r\n  phone: string;\r\n  adress: {\r\n    streetAddress: string;\r\n    city: string;\r\n    state: string;\r\n    zip: string;\r\n  };\r\n  description: string;\r\n};\r\n\r\nexport interface ITableState {\r\n  list: User[][];\r\n  initialList: User[];\r\n  currentUser?: User;\r\n  currentPaginationPage: number;\r\n  paginations: number[];\r\n}\r\n\r\n/* \r\n  ACTION TYPES \r\n*/\r\n\r\nexport enum ActionTypes {\r\n  setData = \"FETCH/SET_DATA\",\r\n  setCurrentUser = \"APP/SET_CURRENT_USER\",\r\n\r\n  setPaginations = \"APP/SET_PAGINATIONS\",\r\n  updateList = \"APP/UPDATE_LIST\",\r\n  setCurrentPaginationPage = \"APP/SET_CURRENT_PAGINATION_Page\",\r\n}\r\n\r\n/* \r\n  ACTION CREATORS\r\n*/\r\n\r\nexport function getAllUsers() {\r\n  return async (dispatch: Dispatch<any>): Promise<void> => {\r\n    dispatch({ type: app_ac.loading_on });\r\n\r\n    try {\r\n      const { data: list } = await axios.get(API);\r\n\r\n      const chunks = chunkedArray<User>(list, 25);\r\n\r\n      if (list?.length) {\r\n        dispatch({\r\n          type: ActionTypes.setPaginations,\r\n          paginations: [...countPagination(chunks.length)],\r\n        });\r\n        dispatch({\r\n          type: ActionTypes.setData,\r\n          list: chunks,\r\n          initialList: list,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      dispatch({\r\n        type: app_ac.isError,\r\n        errorMsg:\r\n          \"Something went wrong! Please reload the page or wait few minutes ;)\",\r\n      });\r\n      console.error(error);\r\n    }\r\n\r\n    dispatch({ type: app_ac.loading_off });\r\n  };\r\n}\r\n\r\n/* \r\n  REDUCER\r\n*/\r\n\r\nconst init: ITableState /* Initial state */ = {\r\n  list: [],\r\n  currentPaginationPage: 0,\r\n  initialList: [],\r\n  paginations: [],\r\n};\r\n\r\nexport function TableReducer(\r\n  state: ITableState = init,\r\n  action: any\r\n): ITableState {\r\n  switch (action.type) {\r\n    case ActionTypes.setData:\r\n      return { ...state, list: action.list, initialList: action.initialList };\r\n\r\n    case ActionTypes.updateList:\r\n      return { ...state, list: action.updateList };\r\n\r\n    case ActionTypes.setPaginations:\r\n      return { ...state, paginations: action.paginations };\r\n\r\n    case ActionTypes.setCurrentPaginationPage:\r\n      return { ...state, currentPaginationPage: action.currentPaginationPage };\r\n\r\n    case ActionTypes.setCurrentUser:\r\n      return { ...state, currentUser: action.currentUser };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","export function chunkedArray<T>(array: T[], size: number = 25): T[][] {\r\n  const chunks: T[][] = [];\r\n\r\n  for (let i = 0; i < array.length; i += size) {\r\n    chunks.push(array.slice(i, i + size));\r\n  }\r\n\r\n  return chunks;\r\n}\r\n\r\nexport function countPagination(count: number) {\r\n  return Array.from(Array(count).keys());\r\n}\r\n\r\nexport function unchanckedArray<T>(array: T[][]): T[] {\r\n  let arr: T[] = [];\r\n\r\n  for (let i = 0; i < array.length; i++) {\r\n    for (let j = 0; j < array[i].length; j++) {\r\n      arr = [...arr, array[i][j]];\r\n    }\r\n  }\r\n\r\n  return arr;\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport { AppReducer } from \"./ducks/app\";\r\n\r\nimport { TableReducer } from \"./ducks/table\";\r\n\r\nexport default combineReducers({\r\n  table: TableReducer,\r\n  app: AppReducer,\r\n});\r\n","import { applyMiddleware, createStore } from \"redux\";\r\nimport { Provider } from \"react-redux\";\r\nimport PropTypes, { InferProps } from \"prop-types\";\r\nimport thunk from \"redux-thunk\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\n\r\nimport reducers from \"./reducers\";\r\n\r\nimport { IAppState } from \"./ducks/app\";\r\nimport { ITableState } from \"./ducks/table\";\r\n\r\nexport interface IRootState {\r\n  table: ITableState;\r\n  app: IAppState;\r\n}\r\n\r\nconst enhancers = composeWithDevTools(applyMiddleware(thunk));\r\n\r\nconst store = createStore<IRootState, any, any, any>(reducers, enhancers);\r\n\r\nexport function State({ children }: InferProps<typeof State.propTypes>) {\r\n  return <Provider store={store}>{children}</Provider>;\r\n}\r\n\r\nState.propTypes = {\r\n  children: PropTypes.oneOfType([\r\n    PropTypes.arrayOf(PropTypes.node),\r\n    PropTypes.node,\r\n  ]).isRequired,\r\n};\r\n","import { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { IAppState } from \"../State/ducks/app\";\r\nimport { getAllUsers, ITableState } from \"../State/ducks/table\";\r\nimport { IRootState } from \"../State/index\";\r\nimport { User } from \"../State/ducks/table\";\r\n\r\ndeclare type GetUsersHook = {\r\n  data: User[][];\r\n  isLoading: boolean;\r\n  isError: boolean;\r\n  errorMsg: string | null;\r\n};\r\n\r\nexport function useGetUsers(): GetUsersHook {\r\n  const { isLoading, isError, errorMsg }: IAppState = useSelector<\r\n    IRootState,\r\n    IAppState\r\n  >((state) => state.app);\r\n\r\n  const { list: data }: ITableState = useSelector<IRootState, ITableState>(\r\n    ({table}) => table\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getAllUsers());\r\n  }, [dispatch]);\r\n\r\n  return { data, isLoading, isError, errorMsg };\r\n}\r\n","export const API =\r\n  \"http://www.filltext.com/?rows=100&id={number|1000}&firstName={firstName}&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&adress={addressObject}&description={lorem|32}\";\r\n","import PropTypes, { InferProps } from \"prop-types\";\r\n\r\nimport \"./ErrorBlank.css\";\r\n\r\nexport function ErrorBlank({ msg = \"Something went wrong ;(\" }: InferProps<typeof ErrorBlank.propTypes>) {\r\n  return (\r\n    <div className=\"Table__error-blank\">\r\n      <div className=\"Table__error-blank--msg\">{msg}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nErrorBlank.propTypes = {\r\n  msg: PropTypes.string || null,\r\n};\r\n","import PropTypes, { InferProps } from \"prop-types\";\r\nimport { useState } from \"react\";\r\nimport { ErrorBlank } from \"../ErrorBlank/ErrorBlank\";\r\n\r\nimport \"./SearchBar.css\";\r\n\r\nexport function SearchBar({\r\n  locked,\r\n  isError,\r\n  setSearchLine,\r\n  isErrorSearch,\r\n  setIsErrorSearch,\r\n}: InferProps<typeof SearchBar.propTypes>) {\r\n  const [searchBar, setSearchBar] = useState(\"\");\r\n  \r\n  return (\r\n    <>\r\n      <hr />\r\n      <div className=\"Table__searchBar\">\r\n        <input\r\n          onChange={(e: any) => setSearchBar(e.target.value)}\r\n          onInput={(e: any) => isErrorSearch && setIsErrorSearch(false)}\r\n          type=\"text\"\r\n          placeholder=\"Search\"\r\n          disabled={locked || isError}\r\n        />\r\n        <button\r\n          disabled={locked || isError}\r\n          onClick={() => setSearchLine(searchBar)}\r\n        >\r\n          Search\r\n        </button>\r\n      </div>\r\n\r\n      {(isErrorSearch && (\r\n        <ErrorBlank msg=\"Nothing found, please try again!\" />\r\n      )) ||\r\n        \"\"}\r\n\r\n      <hr />\r\n    </>\r\n  );\r\n}\r\n\r\nSearchBar.propTypes = {\r\n  locked: PropTypes.bool.isRequired,\r\n  isError: PropTypes.bool.isRequired,\r\n  setSearchLine: () => {},\r\n  isErrorSearch: PropTypes.bool,\r\n  setIsErrorSearch: () => {},\r\n};\r\n","export function Loader() {\r\n  return (\r\n    <svg\r\n      style={{\r\n        margin: \"0 auto\",\r\n        shapeRendering: \"auto\",\r\n        width: \"100%\",\r\n        height: \"200px\",\r\n      }}\r\n      viewBox=\"0 0 100 100\"\r\n      preserveAspectRatio=\"xMidYMid\"\r\n    >\r\n      <path\r\n        fill=\"none\"\r\n        stroke=\"#ffff00\"\r\n        strokeWidth=\"8\"\r\n        strokeDasharray=\"42.76482137044271 42.76482137044271\"\r\n        d=\"M24.3 30C11.4 30 5 43.3 5 50s6.4 20 19.3 20c19.3 0 32.1-40 51.4-40 C88.6 30 95 43.3 95 50s-6.4 20-19.3 20C56.4 70 43.6 30 24.3 30z\"\r\n        strokeLinecap=\"round\"\r\n        style={{ transform: \"scale(0.8)\", transformOrigin: \"50px 50px\" }}\r\n      >\r\n        <animate\r\n          attributeName=\"stroke-dashoffset\"\r\n          repeatCount=\"indefinite\"\r\n          dur=\"1s\"\r\n          keyTimes=\"0;1\"\r\n          values=\"0;256.58892822265625\"\r\n        ></animate>\r\n      </path>\r\n    </svg>\r\n  );\r\n}\r\n","import PropTypes, { InferProps } from \"prop-types\";\r\n\r\ninterface TableListProps {\r\n  setCurrentUser: (id: string | number) => {};\r\n  currentPaginationPage: number;\r\n}\r\n\r\nexport function TableList({\r\n  list,\r\n  setCurrentUser,\r\n  currentPaginationPage,\r\n}: TableListProps & InferProps<typeof TableList.propTypes>) {\r\n  return (\r\n    <tbody>\r\n      {list &&\r\n        list.length &&\r\n        list[currentPaginationPage].map((i: any, idx: any) => (\r\n          <tr key={idx} onClick={() => setCurrentUser(i.id)}>\r\n            <td>{i.id}</td>\r\n            <td>{i.firstName}</td>\r\n            <td>{i.lastName}</td>\r\n            <td>{i.email}</td>\r\n            <td>{i.phone}</td>\r\n            <td>{i.adress.streetAddress}</td>\r\n            <td>{i.adress.city}</td>\r\n            <td>{i.adress.state}</td>\r\n            <td>{i.adress.zip}</td>\r\n          </tr>\r\n        ))}\r\n    </tbody>\r\n  );\r\n}\r\n\r\nTableList.propTypes = {\r\n  list: PropTypes.array,\r\n  setCurrentUser: () => {},\r\n  currentPaginationPage: PropTypes.number,\r\n};\r\n","import PropTypes, { InferProps } from \"prop-types\";\r\nimport { User } from \"../../State/ducks/table\";\r\n\r\nimport \"./CurrentUser.css\";\r\n\r\ninterface CurretnUserProps {\r\n  user: User;\r\n}\r\n\r\nexport function CurrentUser({\r\n  user,\r\n}: CurretnUserProps & InferProps<typeof CurrentUser.propTypes>) {\r\n  return (\r\n    <div className=\"Table__current\">\r\n      <div className=\"Table__current--container\">\r\n        {Object.keys(user).length && (\r\n          <>\r\n            <div className=\"Table__current-item\">\r\n              <span>id:</span> {user.id}\r\n            </div>\r\n            <div className=\"Table__current-item\">\r\n              <span>firstName:</span> {user.firstName}\r\n            </div>\r\n            <div className=\"Table__current-item\">\r\n              <span>lastName:</span> {user.lastName}\r\n            </div>\r\n            <div className=\"Table__current-item\">\r\n              <span>email:</span> {user.email}\r\n            </div>\r\n            <div className=\"Table__current-item\">\r\n              <span>phone:</span> {user.phone}\r\n            </div>\r\n            <div className=\"Table__current-item\">\r\n              <span>adress:</span>\r\n              <div className=\"Table__current-item__nested\">\r\n                <span>city: </span>\r\n                {user.adress.city}\r\n              </div>\r\n              <div className=\"Table__current-item__nested\">\r\n                <span>state: </span>\r\n                {user.adress.state}\r\n              </div>\r\n              <div className=\"Table__current-item__nested\">\r\n                <span>streetAddress: </span>\r\n                {user.adress.streetAddress}\r\n              </div>\r\n              <div className=\"Table__current-item__nested\">\r\n                <span>zip: </span>\r\n                {user.adress.zip}\r\n              </div>\r\n            </div>\r\n            <div className=\"Table__current-item\">\r\n              <span>description:</span> {user.description}\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nCurrentUser.propTypes = {\r\n  user: PropTypes.object,\r\n};\r\n","import PropTypes, { InferProps } from \"prop-types\";\r\n\r\nimport \"./Paginations.css\";\r\n\r\nexport function Paginations({\r\n  paginations,\r\n  setPagination,\r\n  currentPaginationPage,\r\n}: InferProps<typeof Paginations.propTypes>) {\r\n  return (\r\n    <>\r\n      <hr />\r\n\r\n      <div className=\"Table__paginations\">\r\n        {paginations.length &&\r\n          paginations.map((i, idx) => (\r\n            <button\r\n              key={idx}\r\n              className={(currentPaginationPage === i && \"active\") || \"\"}\r\n              onClick={() => setPagination(i)}\r\n            >\r\n              Список №{i + 1}\r\n            </button>\r\n          ))}\r\n      </div>\r\n      <hr />\r\n    </>\r\n  );\r\n}\r\n\r\nPaginations.propTypes = {\r\n  paginations: PropTypes.array.isRequired,\r\n  setPagination: () => {},\r\n  currentPaginationPage: PropTypes.number.isRequired,\r\n};\r\n","import { useFilter } from \"../../../hooks/useFilter\";\r\n\r\nconst els = [\r\n  { name: \"id\", parent: \"id\" },\r\n  { name: \"firstName\", parent: \"firstName\" },\r\n  { name: \"lastName\", parent: \"lastName\" },\r\n  { name: \"email\", parent: \"email\" },\r\n  { name: \"phone\", parent: \"phone\" },\r\n  { name: \"streetAddress\", parent: \"adress\" },\r\n  { name: \"city\", parent: \"adress\" },\r\n  { name: \"state\", parent: \"adress\" },\r\n  { name: \"zip\", parent: \"adress\" },\r\n];\r\n\r\nexport function TableHeader() {\r\n  const { setFilter, els: elemsOfFilter } = useFilter();\r\n\r\n  return (\r\n    <thead>\r\n      <tr>\r\n        {els.map((i: any, idx) => (\r\n          <th\r\n            key={idx}\r\n            onClick={() => setFilter(i)}\r\n            className={elemsOfFilter[i.name] ? \"active\" : \"elem\"}\r\n          >\r\n            {i.name}\r\n          </th>\r\n        ))}\r\n      </tr>\r\n    </thead>\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { chunkedArray } from \"../helpers\";\r\nimport { IRootState } from \"../State\";\r\nimport { ActionTypes, ITableState, User } from \"../State/ducks/table\";\r\n\r\nexport function useFilter() {\r\n  const [els, setEls] = useState({\r\n    id: false,\r\n    firstName: false,\r\n    lastName: false,\r\n    email: false,\r\n    phone: false,\r\n    streetAddress: false,\r\n    city: false,\r\n    state: false,\r\n    zip: false,\r\n  });\r\n\r\n  const { initialList }: ITableState = useSelector<IRootState, ITableState>(\r\n    ({ table }) => table\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  type FilterElemenet = { name: string; parent: string };\r\n\r\n  function setFilter(element: FilterElemenet) {\r\n    setEls({ ...els, [element.name]: !els[element.name] });\r\n\r\n    let updateList: User[] = initialList;\r\n\r\n    function filterMath(elementA: number, elementB: number) {\r\n      return !els[element.name] ? elementA - elementB : -elementA + -elementB;\r\n    }\r\n\r\n    updateList = updateList.sort((a, b) => {\r\n      if (a[element.parent] instanceof Object) {\r\n        if (element.name === \"zip\") {\r\n          return filterMath(\r\n            +a[element.parent][element.name],\r\n            +b[element.parent][element.name]\r\n          );\r\n        }\r\n\r\n        return filterMath(\r\n          +a[element.parent][element.name].toString().length,\r\n          +b[element.parent][element.name].toString().length\r\n        );\r\n      } else if (element.parent === \"id\") {\r\n        return filterMath(+a[element.parent], +b[element.parent]);\r\n      }\r\n\r\n      return filterMath(\r\n        +a[element.parent].toString().length,\r\n        +b[element.parent].toString().length\r\n      );\r\n    });\r\n\r\n    dispatch({\r\n      type: ActionTypes.updateList,\r\n      updateList: chunkedArray<User>(updateList),\r\n    });\r\n  }\r\n\r\n  return { setFilter, els };\r\n}\r\n","import { useGetUsers } from \"../../hooks/useGetUsers\";\r\nimport { useCurrentUser } from \"../../hooks/useCurrentUser\";\r\nimport { useSearch } from \"./../../hooks/useSearch\";\r\n\r\nimport { SearchBar } from \"../../components/SearchBar/SearchBar\";\r\nimport { Loader } from \"./../../components/Loader/Loader\";\r\nimport { ErrorBlank } from \"./../../components/ErrorBlank/ErrorBlank\";\r\nimport { TableList } from \"./../../components/TableList/TableList\";\r\nimport { CurrentUser } from \"./../../components/CurrentUser/CurrentUser\";\r\nimport { Paginations } from \"./../../components/Paginations/Paginations\";\r\nimport { usePagination } from \"./../../hooks/usePagination\";\r\nimport { TableHeader } from \"./../../components/TableList/TableHeader/TableHeader\";\r\n\r\nimport \"./Table.css\";\r\n\r\nconst msg_empty = \"Users not found ;(\";\r\n\r\nexport function Table() {\r\n  const { data, isLoading, isError, errorMsg } = useGetUsers();\r\n  const { currentUser, setCurrentUser } = useCurrentUser();\r\n  const { setSearchLine, isErrorSearch, setIsErrorSearch } = useSearch();\r\n  const { paginations, setPagination, currentPaginationPage } = usePagination();\r\n\r\n  return (\r\n    <main className=\"Table\">\r\n      <SearchBar\r\n        locked={isLoading}\r\n        setSearchLine={setSearchLine}\r\n        isError={isError}\r\n        isErrorSearch={isErrorSearch}\r\n        setIsErrorSearch={setIsErrorSearch}\r\n      />\r\n\r\n      {(isLoading && <Loader />) ||\r\n        (!isLoading && isError && <ErrorBlank msg={errorMsg} />) ||\r\n        (!isError &&\r\n          !isLoading &&\r\n          ((data && data.length && (\r\n            <>\r\n              <table className=\"Table__list\">\r\n                <TableHeader />\r\n                <TableList\r\n                  list={data}\r\n                  setCurrentUser={setCurrentUser}\r\n                  currentPaginationPage={currentPaginationPage}\r\n                />\r\n              </table>\r\n              <Paginations\r\n                paginations={paginations}\r\n                setPagination={setPagination}\r\n                currentPaginationPage={currentPaginationPage}\r\n              />\r\n            </>\r\n          )) ||\r\n            (!isLoading && <ErrorBlank msg={msg_empty} />)))}\r\n\r\n      {(currentUser !== undefined && Object.keys(currentUser).length && (\r\n        <CurrentUser user={currentUser} />\r\n      )) ||\r\n        \"\"}\r\n    </main>\r\n  );\r\n}\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { ActionTypes, ITableState, User } from \"../State/ducks/table\";\r\nimport { IRootState } from \"../State\";\r\n\r\nexport function useCurrentUser() {\r\n  const { currentUser, currentPaginationPage, list }: ITableState = useSelector<\r\n    IRootState,\r\n    ITableState\r\n  >(({ table }) => table);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  function setCurrentUser(id?: number | string) {\r\n    const userDispatch = (cu: User | {}) =>\r\n      dispatch({ type: ActionTypes.setCurrentUser, currentUser: cu });\r\n\r\n    // eslint-disable-next-line eqeqeq\r\n    const curru = list[currentPaginationPage].find((i) => id == i.id) || {};\r\n\r\n    userDispatch(curru);\r\n  }\r\n\r\n  return { currentUser, setCurrentUser };\r\n}\r\n","import { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { ActionTypes, ITableState, User } from \"../State/ducks/table\";\r\nimport { chunkedArray, countPagination } from \"./../helpers/index\";\r\nimport { IRootState } from \"./../State/index\";\r\n\r\nexport function useSearch() {\r\n  const [isErrorSearch, setIsErrorSearch] = useState(false);\r\n  const { initialList } = useSelector<IRootState, ITableState>(\r\n    ({ table }) => table\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  function setSearchLine(value: string) {\r\n    if (isErrorSearch) setIsErrorSearch(false);\r\n\r\n    let updateList: User[] = [];\r\n    let chunkedUpdatedList: User[][];\r\n\r\n    function escapeRegExp(string: string) {\r\n      return string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\r\n    }\r\n\r\n    const pattern = (val: string) =>\r\n      new RegExp(\"(\" + escapeRegExp(val) + \")\", \"gi\");\r\n\r\n    for (let user of initialList) {\r\n      const upd = () => {\r\n        updateList.push(user);\r\n      };\r\n\r\n      if (user.firstName.match(pattern(value))) upd();\r\n      else if (user.id.toString().match(pattern(value.toString()))) upd();\r\n      else if (user.lastName.match(pattern(value))) upd();\r\n      else if (user.email.match(pattern(value))) upd();\r\n      else if (user.phone.match(pattern(value.toString()))) upd();\r\n      else if (user.adress.streetAddress.match(pattern(value))) upd();\r\n      else if (user.adress.city.match(pattern(value))) upd();\r\n      else if (user.adress.state.match(pattern(value))) upd();\r\n      else if (user.adress.zip.match(pattern(value.toString()))) upd();\r\n    }\r\n\r\n    function dispatcherList(arr: User[][]) {\r\n      dispatch({\r\n        type: ActionTypes.updateList,\r\n        updateList: arr,\r\n      });\r\n\r\n      dispatch({\r\n        type: ActionTypes.setPaginations,\r\n        paginations: countPagination(arr.length),\r\n      });\r\n    }\r\n\r\n    if (updateList.length) {\r\n      chunkedUpdatedList = chunkedArray<User>(updateList, 25);\r\n\r\n      dispatcherList(chunkedUpdatedList);\r\n    } else {\r\n      if (!value.trim().length) setIsErrorSearch(false);\r\n      else setIsErrorSearch(true);\r\n      dispatcherList(chunkedArray<User>(initialList, 25));\r\n    }\r\n  }\r\n\r\n  return { setSearchLine, isErrorSearch, setIsErrorSearch };\r\n}\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { IRootState } from \"../State\";\r\nimport { ActionTypes, ITableState } from \"../State/ducks/table\";\r\n\r\ninterface PaginationHook {\r\n  paginations: number[];\r\n  currentPaginationPage: number;\r\n  setPagination: (count: number) => void;\r\n}\r\n\r\nexport function usePagination(): PaginationHook {\r\n  const { paginations, currentPaginationPage } = useSelector<\r\n    IRootState,\r\n    ITableState\r\n  >(({ table }) => table);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  function setPagination(count: number) {\r\n    dispatch({\r\n      type: ActionTypes.setCurrentPaginationPage,\r\n      currentPaginationPage: count,\r\n    });\r\n  }\r\n\r\n  return { paginations, currentPaginationPage, setPagination };\r\n}\r\n","import React from \"react\";\n\nimport { State } from \"./../../State/index\";\nimport { Table } from './../Table/Table';\n\nexport function App() {\n  return (\n    <State>\n      <Table />\n    </State>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./modules/App/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-Svitals\nreportWebVitals();\n"],"sourceRoot":""}